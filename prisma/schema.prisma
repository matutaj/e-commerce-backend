// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Produt {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String?
  categoryId String
  quant      Decimal
  cost       Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Carry    Carry[]
}

model Category {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Produt    Produt[]
}

model User {
  id       String    @id @default(uuid())
  name     String
  typeUser TypeUser  @default(Usuario)
  imageUrl String?
  Contact  Contact[]
  Login    Login?
  Buy      Buy[]
}

enum TypeUser {
  Usuario
  Admin
}

model Contact {
  id            String   @id @default(uuid())
  content       String   @unique
  contactTypeId String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  ContactType ContactType @relation(fields: [contactTypeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model ContactType {
  id          String   @id @default(uuid())
  description String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Contacts Contact[]
}

model Login {
  email            String  @unique
  userId           String  @unique
  passwordHash     String
  passwordTokenSet String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([email])
}

model Carry {
  id       String @id @default(uuid())
  produtId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  produt Produt @relation(fields: [produtId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Buy {
  id             String   @id @default(uuid())
  deliveryDate   DateTime
  localdelivery  String
  cellfoneNumber Decimal
  totalPrice     Decimal
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
